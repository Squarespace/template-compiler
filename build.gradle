import org.apache.tools.ant.filters.ReplaceTokens

buildscript {
  repositories {
    mavenCentral()
  }
}

plugins {
  id 'me.champeau.gradle.jmh' version '0.5.0'
  id 'net.researchgate.release' version '2.6.0'
  id 'com.moowork.node' version '1.3.1'
	id 'jacoco'
  id 'java-library'
  id 'maven-publish'
  id 'signing'
}

allprojects {
  repositories {
    mavenLocal()
    mavenCentral()
  }

}

wrapper {
  gradleVersion = '6.8.2'
}

project.ext {
  argparseVersion = '0.4.4'
  ccVersion = '1.0.6'
  cldrengineVersion = '1.2.3'
  diffutilsVersion = '1.3.0'
  hamcrestVersion = '2.1'
  jacksonVersion = '2.3.3'
  jsonunitVersion = '1.25.0'
  snifferVersion = '1.16'
  testngVersion = '6.14.3'
  zjsonVersion = '0.3.6'

  buildDate = new java.util.Date()
  buildCommit = ('git rev-parse HEAD').execute().text.trim()

  isRelease = !version.endsWith('SNAPSHOT')
  isUpload = false
  isSign = false
}

// Disable Javadoc linting under Java 8+
if (JavaVersion.current().isJava8Compatible()) {
  allprojects {
    tasks.withType(Javadoc) {
      options.addStringOption('Xdoclint:none', '-quiet')
    }
  }
}

subprojects {

  group = 'com.squarespace.template'

  apply plugin: 'me.champeau.gradle.jmh'
  apply plugin: 'java'
  apply plugin: 'eclipse'
  apply plugin: 'jacoco'
  apply plugin: 'maven-publish'
  apply plugin: 'signing'

  sourceCompatibility = 8
  targetCompatibility = 8

  jmh {
    jmhVersion '1.23'
    forceGC = true
    includeTests = false
    zip64 = true
  }

  plugins.withType(EclipsePlugin) {
    project.eclipse.classpath.plusConfigurations += [ configurations.jmh ]
  }

  release {
    git {
      requireBranch = ''
    }
  }

  test {
    useTestNG()
    maxParallelForks = Runtime.runtime.availableProcessors().intdiv(2) ?: 1
  }

  java {
    withSourcesJar()
    withJavadocJar()
  }

  task testJar(type: Jar, group: 'Build', dependsOn: 'javadoc') {
    classifier 'tests'
    from sourceSets.test.output
  }

  assemble.dependsOn testJar
  testJar.dependsOn compileTestJava

  configurations {
    tests
  }

  artifacts {
    tests testJar
  }

  jacocoTestReport {
      reports {
          xml.enabled false
          csv.enabled false
          html.destination file("${buildDir}/jacoco-report")
      }
  }

  processResources {
    from (sourceSets.main.resources.srcDirs) {
      include '**/build.properties'
      filter(ReplaceTokens, tokens: [
        'build.version': project.version,
        'build.date': buildDate.toString(),
        'build.commit': buildCommit
      ])
    }

    from (sourceSets.main.resources.srcDirs) {
      exclude '**/build.properties'
    }
  }

  // Ensure this always runs, to generate fresh build.properties
  processResources.outputs.upToDateWhen { false }

  publishing {
    publications {
      mavenJava(MavenPublication) {
          artifactId = project.getName()
          from components.java
          artifact testJar
          versionMapping {
              usage('java-api') {
                  fromResolutionOf('runtimeClasspath')
              }
              usage('java-runtime') {
                  fromResolutionResult()
              }
          }
          pom {
              name = project.getName()
              description = 'Squarespace template compiler'
              url = 'https://github.com/squarespace/template-compiler'
              licenses {
                  license {
                      name = 'The Apache License, Version 2.0'
                      url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                  }
              }
              developers {
                  developer {
                      id = 'pathensley'
                      name = 'Patrick Hensley'
                      email = 'pathensley@gmail.com'
                  }
              }
              scm {
                  connection = 'scm:git:git@github.com:Squarespace/template-compiler.git'
                  developerConnection = 'scm:git:git@github.com:Squarespace/template-compiler.git'
                  url = 'https://github.com/squarespace/template-compiler'
              }
          }
      }
  }
  repositories {
      maven {
        def releasesRepoUrl = 'https://oss.sonatype.org/service/local/staging/deploy/maven2'
        def snapshotsRepoUrl = 'https://oss.sonatype.org/content/repositories/snapshots/'
        def _username = project.ext.properties.OSS_USERNAME
        def _password = project.ext.properties.OSS_PASSWORD

        if (project.hasProperty('publish-internal')) {
          releasesRepoUrl = NEXUS_INTERNAL_RELEASE_URL
          snapshotsRepoUrl = NEXUS_INTERNAL_SNAPSHOT_URL
          _username = NEXUS_USERNAME
          _password = System.getenv('NEXUS_PASSWORD')
        }

        url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
        credentials {
          username = _username
          password = _password
        }
      }
    }
  }

  tasks.withType(Sign) {
    onlyIf { isRelease }
  }

  signing {
    sign publishing.publications.mavenJava
    useGpgCmd()
  }

}

